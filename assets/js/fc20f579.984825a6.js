"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[947],{2049:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/image-33-1bf9d6babcf3044813f0d0720effcc96.png"},7714:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Document Home/Troubleshooting","title":"FAQ","description":"* How can I restore the device?","source":"@site/docs/Document Home/8.Troubleshooting.md","sourceDirName":"Document Home","slug":"/Document Home/Troubleshooting","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/hongyang-rp/rubikpi-ubuntu-user-manual-test-en.github.io/tree/main/docs/Document Home/8.Troubleshooting.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Robot development","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Robot development"},"next":{"title":"IoT connectivity","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/IoT connectivity"}}');var t=s(4848),o=s(8453);const r={},l="FAQ",c={},d=[{value:"Further support",id:"further-support",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"faq",children:"FAQ"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I restore the device?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Download the software."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Force the device into Emergency Download (EDL) mode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Flash the downloaded software."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I flash the Configuration Data Table (CDT)?"}),"\n",(0,t.jsx)(n.p,{children:"The CDT provides platform or device-related data, such as the platform ID, subtype, and version. Various software (driver/firmware) modules can use this information to dynamically detect and initialize the platform. It is already integrated into the software package by default, and the following steps can be performed if needed."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Ensure that the device is in EDL mode. For more information, refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/update-software#enterEDL",children:"Enter EDL mode."})]})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.a,{href:"https://thundercomm.s3.dualstack.ap-northeast-1.amazonaws.com/uploads/web/rubik-pi-3/tools/RUBIKPI_CDT.zip",children:"here"})," to download the required CDT."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"To flash the CDT, run the following command:"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"./qdl prog_firehose_ddr.elf rawprogram3.xml patch3.xml\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I configure Universal Flash Storage (UFS)?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/update-software#flashQDL",children:"Flash using the QDL tool."})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I force the device into Emergency Download (EDL) mode?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/update-software#enterEDL",children:"Enter EDL mode."})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I install and connect Android Debug Bridge (ADB) on the host?"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"adb"})," command can simplify various device operations, such as debugging, capturing kernel logs, and pushing applications and files to the target device."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.a,{href:"https://thundercomm.s3.ap-northeast-1.amazonaws.com/uploads/web/rubik-pi-3/tools/qud/qud.win.1.1_installer_10061.1.zip",children:"here"})," to download the QUD driver."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following command on the Linux host."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"sudo apt install git android-tools-adb android-tools-fastboot wget\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"To verify the version of ADB on the Linux host, run the following command:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"adb --version\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Connect the RUBIK Pi device to the host using a USB Type-C cable. Ensure that the device is displayed as an ADB device."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"adb devices\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Run the following command to enter the shell:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"adb shell\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"When already connected to a network, how do I reconnect to a different one?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"To disconnect from the current network, run the following command:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"sudo nmcli c down <WiFi-SSID>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo nmcli c down RUBIKPiWiFi\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"Connection 'RUBIKPiWiFi' successfully deactivated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2)\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"To verify that you have disconnected, run the following command:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"nmcli -p device\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s(2049).A+"",width:"763",height:"218"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"To connect to a different Wi-Fi network, run the following command:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"nmcli dev wifi connect <WiFi-SSID> password <WiFi-password>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"nmcli dev wifi connect RUBIKPiWiFi password 1234567890\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"Device 'wlan0' successfully activated with 'd7b990bd-3b77-4b13-b239-b706553abaf8'.\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I use Minicom to set up the debug UART?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/setup-device#setUart",children:"Set up the debug UART"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How do I switch to the root user?"}),"\n",(0,t.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo -i\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I switch from the desktop version to the service version?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/setup-device#conNET",children:"Connect to the network."})," Ensure that the network connection is normal."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following commands to switch from the desktop version to service version."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo add-apt-repository ppa:ubuntu-qcom-iot/qcom-noble-ppa \nsudo apt update\nsudo apt upgrade -y\nsudo apt-get install qcom-adreno1\nsudo apt-get remove ubuntu-desktop\nsudo apt remove gdm3\nsudo reboot\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I switch from the service version to the desktop version?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document%20Home/Quick%20Start/setup-device#conNET",children:"Connect to the network."})," Ensure that the network connection is normal."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the following commands to switch from the service version to desktop version."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"sudo add-apt-repository ppa:ubuntu-qcom-iot/qcom-noble-ppa\nsudo apt update\nsudo apt upgrade -y\nsudo apt install qcom-adreno1- libgbm-msm1- libegl-mesa0 libegl1 libgles2 libglvnd0 libvulkan1\nsudo apt install ubuntu-desktop\nsudo reboot\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How do I update the USB and Ethernet controller firmware?"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["To download the firmware, register and log in to the ",(0,t.jsx)(n.a,{href:"https://www.renesas.com/",children:"Renesas"})," website. After logging in, you can access the firmware from this ",(0,t.jsx)(n.a,{href:"https://www.renesas.com/us/en/products/interface/usb-switches-hubs/upd720201-usb-30-host-controller#design_development",children:"link"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"On the Linux host, use the scp command to copy the firmware to the device."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"scp renesas_usb_fw.mem ubuntu@<WIFI-IP>:~\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Add the firmware to the device's image."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"sudo cp ~ubuntu/renesas_usb_fw.mem /lib/firmware\nsudo mkinitramfs -o /boot/initrd.img-$(uname -r)\nsudo reboot\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Check that the firmware is added successfully."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"sudo lsinitramfs /boot/initrd.img-$(uname -r) | grep renesas\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How do I troubleshoot issues related to flashing?"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Ensure that the host is not running the ModemManager tool, as it can interfere with QDL flashing."})}),"\n",(0,t.jsx)(n.p,{children:"If you are using a Linux distribution with systemd, use the following command to stop the ModemManager tool:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-css",children:"sudo systemctl stop ModemManager\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If you need to use the ModemManager tool, restart it after the flashing process is complete."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If the flashing process fails, follow these steps and then retry the flashing procedure:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Power off the device."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Disconnect the device from the host."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Restart the host."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"How can I do 3D printing using the case design material provided by RUBIK Pi?"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"further-support",children:"Further support"}),"\n",(0,t.jsxs)(n.p,{children:["Post your questions on the ",(0,t.jsx)(n.a,{href:"https://community.rubikpi.ai/",children:"RUBIK Pi forum"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);