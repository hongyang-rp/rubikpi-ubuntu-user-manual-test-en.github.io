"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8606],{11470:(e,n,r)=>{r.d(n,{A:()=>y});var t=r(96540),i=r(34164),l=r(23104),s=r(56347),o=r(205),a=r(57485),c=r(31682),u=r(70679);function d(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:r,default:t}})=>({value:e,label:n,attributes:r,default:t}))}(r);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const r=(0,s.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,a.aZ)(i),(0,t.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})},[i,r])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,l=h(e),[s,a]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:l})),[c,d]=m({queryString:r,groupId:i}),[g,b]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,i]=(0,u.Dv)(n);return[r,(0,t.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),x=(()=>{const e=c??g;return p({value:e,tabValues:l})?e:null})();(0,o.A)(()=>{x&&a(x)},[x]);return{selectedValue:s,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),b(e)},[d,b,l]),tabValues:l}}var b=r(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=r(74848);function j({className:e,block:n,selectedValue:r,selectValue:t,tabValues:s}){const o=[],{blockElementScrollPositionUntilNextRender:a}=(0,l.a_)(),c=e=>{const n=e.currentTarget,i=o.indexOf(n),l=s[i].value;l!==r&&(a(n),t(l))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:s.map(({value:e,label:n,attributes:t})=>(0,f.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...t,className:(0,i.A)("tabs__item",x.tabItem,t?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function k({lazy:e,children:n,selectedValue:r}){const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=l.find(e=>e.props.value===r);return e?(0,t.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function v(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,f.jsx)(j,{...n,...e}),(0,f.jsx)(k,{...n,...e})]})}function y(e){const n=(0,b.A)();return(0,f.jsx)(v,{...e,children:d(e.children)},String(n))}},12821:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Document Home/Linux-Kernel","title":"Linux Kernel","description":"This chapter describes how to configure and build a customized kernel for your RUBUK Pi 3.","source":"@site/docs/Document Home/11.Linux-Kernel.md","sourceDirName":"Document Home","slug":"/Document Home/Linux-Kernel","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Linux-Kernel","draft":false,"unlisted":false,"editUrl":"https://github.com/hongyang-rp/rubikpi-ubuntu-user-manual-test-en.github.io/tree/main/docs/Document Home/11.Linux-Kernel.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"toc_min_heading_level":2,"toc_max_heading_level":4},"sidebar":"tutorialSidebar","previous":{"title":"IoT-connectivity","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/IoT-connectivity"},"next":{"title":"Datasheet","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Datasheet"}}');var i=r(74848),l=r(28453),s=r(11470),o=r(19365);const a={toc_min_heading_level:2,toc_max_heading_level:4},c="Linux Kernel",u={},d=[{value:"Update the kernel",id:"update-the-kernel",level:2},{value:"Compile the kernel",id:"compile-the-kernel",level:2},{value:"Download kernel source code",id:"download-kernel-source-code",level:3},{value:"Configured the kernel",id:"configured-the-kernel",level:2},{value:"Prepare for the configuration",id:"prepare-for-the-configuration",level:3},{value:"menuconfig",id:"menuconfig",level:3},{value:"Save changes",id:"save-changes",level:3},{value:"Apply kernel patches",id:"apply-kernel-patches",level:2},{value:"Confirm your kernel version",id:"confirm-your-kernel-version",level:3},{value:"Apply patches",id:"apply-patches",level:3},{value:"Kernel header files",id:"kernel-header-files",level:3},{value:"Contribute your code",id:"contribute-your-code",level:2},{value:"Contribute code to the RUBIK Pi kernel",id:"contribute-code-to-the-rubik-pi-kernel",level:3},{value:"Contribute code to the upstream Linux kernel",id:"contribute-code-to-the-upstream-linux-kernel",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"linux-kernel",children:"Linux Kernel"})}),"\n",(0,i.jsx)(n.p,{children:"This chapter describes how to configure and build a customized kernel for your RUBUK Pi 3."}),"\n",(0,i.jsxs)(n.p,{children:["The RUBIK Pi kernel is hosted on ",(0,i.jsx)(n.a,{href:"https://github.com/rubikpi-ai/linux-ubuntu",children:"GitHub"}),". The update lags behind the ",(0,i.jsx)(n.a,{href:"https://github.com/torvalds/linux",children:"upstream Linux kernel"}),". Currently, the kernel version for RUBIK Pi 3 Ubuntu 24.04 LTS is 6.8.12."]}),"\n",(0,i.jsx)(n.h2,{id:"update-the-kernel",children:"Update the kernel"}),"\n",(0,i.jsxs)(n.p,{children:["When using the ",(0,i.jsx)(n.code,{children:"sudo apt upgrade"})," command for an update, your kernel will automatically be updated to the latest stable version. If you want to try the latest unstable test kernel, ",(0,i.jsx)(n.a,{href:"#downloade_linux_code",children:"download the latest kernel source code"})," and ",(0,i.jsx)(n.a,{href:"#Native_and_cross_builds",children:"manually compile and update the kernel"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"compile-the-kernel",children:"Compile the kernel"}),"\n",(0,i.jsx)(n.p,{children:"There are two ways to compile the kernel: native builds and cross-compilation."}),"\n",(0,i.jsx)(n.p,{children:"The compilers and linkers installed by default on RUBIK Pi 3 can build executable files that run on RUBIK Pi 3, which is known as the native build."}),"\n",(0,i.jsx)(n.p,{children:"Cross-compilation, on the other hand, is the process of generating executable code for a different platform, such as building ARM architecture executables on an x86_64 machine."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(25779).A+"",width:"1728",height:"252"})}),"\n",(0,i.jsx)("a",{id:"downloade_linux_code"}),"\n",(0,i.jsx)(n.h3,{id:"download-kernel-source-code",children:"Download kernel source code"}),"\n",(0,i.jsx)(n.p,{children:"Before building for any target platform, you need the kernel source code. To get the kernel source code, you will need Git. If you haven't installed Git, install it on your device first:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt install git\n"})}),"\n",(0,i.jsx)(n.p,{children:"Next, download the source code for the latest RUBIK Pi 3 kernel:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git clone https://github.com/rubikpi-ai/linux-ubuntu.git\n"})}),"\n",(0,i.jsx)(n.p,{children:"This may take a few minutes."}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["The above ",(0,i.jsx)(n.code,{children:"git clone"})," command will download the current active branch, including all commit history and file history. If you only need the latest source code, use the ",(0,i.jsx)(n.code,{children:"git clone --depth 1 https://github.com/rubikpi-ai/linux-ubuntu.git"})," command to reduce the download size."]}),(0,i.jsxs)(n.p,{children:["If you want to download the source code for other branches, switch to the desired branch after cloning: Go to the download directory and run the ",(0,i.jsx)(n.code,{children:"git checkout <branch-name>"})," command to switch to the desired branch."]}),(0,i.jsxs)(n.p,{children:["Regarding the list of available branches, visit ",(0,i.jsx)(n.a,{href:"https://github.com/rubikpi-ai/linux-ubuntu.git",children:"RUBIK Pi kernel GitHub repository"}),"."]})]}),"\n",(0,i.jsx)("a",{id:"Native_and_cross_builds"}),"\n",(0,i.jsx)(n.p,{children:"Now that you have the kernel source code, you can either build a new kernel locally or cross-compile it."}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsxs)(o.A,{value:"Native builds",label:"Native builds",default:!0,children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"First, install the compilation dependencies on RUBIK Pi 3"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt install bc bison flex libssl-dev make gcc debhelper cpio dwarfdump \\\r\nzstd llvm clang libclang-dev gawk dwarves libelf-dev dkms zip rustup\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Then, navigate to the kernel directory and set up the Rust environment:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd linux-ubuntu\r\n\r\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\r\ncargo install --git https://github.com/rust-lang/rust-bindgen --tag v0.65.1 bindgen-cli\r\nsudo cp ~/.cargo/bin/bindgen /usr/bin/bindgen\r\nsudo cp /usr/bin/bindgen /usr/bin/bindgen-0.65\r\nrustup override set $(scripts/min-tool-version.sh rustc)\r\nrustup component add rust-src\n"})}),(0,i.jsxs)(n.p,{children:["If the following content appears, press ",(0,i.jsx)(n.strong,{children:"Enter"})," to use the default configuration.\r\n",(0,i.jsx)(n.img,{src:r(15993).A+"",width:"690",height:"110"})]}),(0,i.jsx)(n.p,{children:"Run the following command to verify that the Rust environment is configured successfully."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"make LLVM=1 rustavailable\n"})}),(0,i.jsx)(n.p,{children:"If the Rust environment is configured successfully, the following output will appear:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Rust is available!\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next, build the kernel. This step may take a long time."})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"fakeroot debian/rules clean\r\nfakeroot debian/rules build\r\nfakeroot debian/rules binary\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The command ",(0,i.jsx)(n.code,{children:"fakeroot debian/rules build"})," will automatically compile the kernel in parallel based on the number of CPU cores. RUBIK Pi has 8 CPU cores, so 8 threads will be used to compile the kernel."]})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install the kernel:"})}),(0,i.jsx)(n.p,{children:"Navigate to the parent directory of linux-ubuntu, then install the generated kernel package onto the system."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd ..\r\nsudo dpkg -i linux-*.deb\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finally, run the following command to reboot your RUBIK Pi 3 and boot into the newly compiled kernel:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo reboot\n"})})]}),(0,i.jsxs)(o.A,{value:"Cross-compilation",label:"Cross compilation",children:[(0,i.jsx)(n.p,{children:"You need a suitable Linux cross-compilation host. We recommend that you perform the cross-compilation within a Docker container hosted on an Ubuntu 24.04 system."}),(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["First, click ",(0,i.jsx)(n.a,{href:"https://thundercomm.s3.dualstack.ap-northeast-1.amazonaws.com/uploads/web/rubik-pi-3/tools/ubuntu-24.04.tar",children:"here"})," to download the Docker image."]}),"\r\n",(0,i.jsx)(n.strong,{children:"Run the following command to import the Docker image and run it:"})]}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["If you have not installed Docker, run the ",(0,i.jsx)(n.code,{children:"apt install docker.io"})," command to install Docker.\r\nWhen running Docker, you need to specify the local working directory to the Docker container. For example, ",(0,i.jsx)(n.em,{children:"/home/rubikpi/ubuntu"})," is the local working directory, and ",(0,i.jsx)(n.em,{children:"/home/ubuntu/prj"})," is the working directory inside the Docker container. Make sure that your local working directory contains the kernel source code directory ",(0,i.jsx)(n.em,{children:"linux-ubuntu"}),"."]})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo docker load -i ubuntu-24.04.tar\r\nsudo docker run --name  ubuntu24.04 --privileged -it -v /home/rubikpi/ubuntu:/home/ubuntu/prj dokken/ubuntu-24.04 /bin/bash\r\nsudo passwd root\r\nsudo passwd ubuntu\r\nsu ubuntu\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install the build dependencies in Ubuntu 24.04 Docker:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt update\r\nsudo apt install -y debhelper gcc-13-aarch64-linux-gnu/noble-updates \\\r\ngcc-11-aarch64-linux-gnu g++-11-aarch64-linux-gnu cpio dwarfdump/noble \\\r\nzstd llvm clang libclang-dev make gawk flex bison git libssl-dev bc dwarves \\\r\nlibelf-dev dkms zip\r\n\r\n**Navigate to the kernel directory and configure the Rust environment:**\r\n```shell\r\ncd prj/linux-ubuntu\r\n\r\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\r\ncargo install --git https://github.com/rust-lang/rust-bindgen --tag v0.65.1 bindgen-cli\r\nsudo cp ~/.cargo/bin/bindgen /usr/bin/bindgen\r\nsudo cp /usr/bin/bindgen /usr/bin/bindgen-0.65\r\nrustup override set $(scripts/min-tool-version.sh rustc)\r\nrustup component add rust-src\n"})}),(0,i.jsxs)(n.p,{children:["If the following content appears, press ",(0,i.jsx)(n.strong,{children:"Enter"})," to use the default configuration.\r\n",(0,i.jsx)(n.img,{src:r(15993).A+"",width:"690",height:"110"})]}),(0,i.jsx)(n.p,{children:"Run the following command to verify that the Rust environment is configured successfully."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"make LLVM=1 rustavailable\n"})}),(0,i.jsx)(n.p,{children:"If the Rust environment is configured successfully, the following output will appear."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Rust is available!\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Next, build the kernel. This step may take a long time."})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"export ARCH=arm64\r\nexport $(dpkg-architecture -aarm64)\r\nexport CROSS_COMPILE=aarch64-linux-gnu-\r\nexport HOSTCC=clang\r\n\r\nfakeroot debian/rules clean\r\nfakeroot debian/rules build\r\nfakeroot debian/rules binary\n"})}),(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The command ",(0,i.jsx)(n.code,{children:"fakeroot debian/rules build"})," will automatically compile the kernel in parallel based on the number of CPU cores. RUBIK Pi has 8 CPU cores, so 8 threads will be used to compile the kernel."]})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install the kernel"})}),(0,i.jsxs)(n.p,{children:["Next, navigate to the parent directory of the ",(0,i.jsx)(n.em,{children:"linux-ubuntu"})," directory, and transfer the generated kernel package to RUBIK Pi 3. You can use a USB drive, SSD, or commands like ",(0,i.jsx)(n.code,{children:"scp"})," or ",(0,i.jsx)(n.code,{children:"adb push"})," to transfer the files.\r\nRun the following command to install the kernel on RUBIK Pi 3\uff1a"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd ..\r\nsudo dpkg -i linux-*.deb\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Finally, run the following command to run the newly compiled kernel on RUBIK Pi 3:"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo reboot\n"})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"configured-the-kernel",children:"Configured the kernel"}),"\n",(0,i.jsx)(n.p,{children:"The Linux kernel is highly configurable. Some users may want to modify the default configuration to fit their own needs, such as enabling new or experimental network protocols, or enabling support for new hardware."}),"\n",(0,i.jsxs)(n.p,{children:["Configuration is typically done through the make menuconfig interface. Alternatively, you can edit the ",(0,i.jsx)(n.em,{children:".config"})," file, but this may be more challenging."]}),"\n",(0,i.jsx)(n.h3,{id:"prepare-for-the-configuration",children:"Prepare for the configuration"}),"\n",(0,i.jsx)(n.p,{children:"The menuconfig tool requires the ncurses development headers to compile and run properly. To install these headers, run the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt install libncurses5-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next, ",(0,i.jsx)(n.a,{href:"#downloade_linux_code",children:"download the kernel source code"}),". It's important to note that you should have already completed the steps for either ",(0,i.jsx)(n.a,{href:"#Native_and_cross_builds",children:"native builds or cross-compilation"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"menuconfig",children:"menuconfig"}),"\n",(0,i.jsx)(n.p,{children:"After setting up everything, you can now compile and run the menuconfig program as follows:"}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(o.A,{value:"Native builds",label:"Native builds",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd linux-ubuntu/debian/build/build-rubikpi\r\n\r\nmake menuconfig\n"})})}),(0,i.jsx)(o.A,{value:"Cross-compilation",label:"Cross-compilation",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd prj/linux-ubuntu/debian/build/build-rubikpi\r\n\r\nmake ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig\n"})})})]}),"\n",(0,i.jsx)(n.p,{children:"Use the keyboard to operate menuconfig:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use the arrow keys for navigation."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.strong,{children:"Enter"})," to enter a submenu (indicated by ---\x3e)."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.strong,{children:"Esc"})," twice to go back to the previous level or exit."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Use the space bar to toggle the enable/disable state of an option."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.strong,{children:"Enter"})," to open a submenu, use the arrow keys to browse the submenu, then press ",(0,i.jsx)(n.strong,{children:"Enter"})," again to select the state."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Press ",(0,i.jsx)(n.strong,{children:"H"})," to get help on an option or menu."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After a quick compilation, the menuconfig will display a list of submenus containing all the configurable options. There are many options, so please read through them patiently. On your first attempt, do not enable or disable a large number of options. The configuration can be easily broken, so it's best to make only a few changes at a time and familiarize yourself with the configuration and build process."}),"\n",(0,i.jsx)(n.h3,{id:"save-changes",children:"Save changes"}),"\n",(0,i.jsxs)(n.p,{children:["After making the changes, press and hold the ",(0,i.jsx)(n.strong,{children:"Esc"})," key until the system prompts you to save the new configuration. By default, it will be saved to the ",(0,i.jsx)(n.em,{children:".config"})," file. You can save and load the configuration by copying this file."]}),"\n",(0,i.jsx)(n.p,{children:"Once the customization is complete, you can now proceed to build the kernel."}),"\n",(0,i.jsxs)(s.A,{children:[(0,i.jsx)(o.A,{value:"Native builds",label:"Native builds",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd linux-ubuntu\r\n\r\nfakeroot debian/rules build\n"})})}),(0,i.jsx)(o.A,{value:"Cross-compilation",label:"Cross-compilation",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"cd prj/linux-ubuntu\r\n\r\nexport ARCH=arm64\r\nexport $(dpkg-architecture -aarm64)\r\nexport CROSS_COMPILE=aarch64-linux-gnu-\r\nexport HOSTCC=clang\r\n\r\nfakeroot debian/rules build\n"})})})]}),"\n",(0,i.jsxs)(n.p,{children:["After the kernel has been built, refer to the methods described ",(0,i.jsx)(n.a,{href:"#Native_and_cross_builds",children:"Compile the kernel"})," to install the kernel."]}),"\n",(0,i.jsx)(n.h2,{id:"apply-kernel-patches",children:"Apply kernel patches"}),"\n",(0,i.jsx)(n.p,{children:"When building a custom kernel, you may want to apply patches or a patch set (a collection of patches) to the Linux kernel."}),"\n",(0,i.jsx)(n.p,{children:"Hardware manufacturers sometimes provide patch sets as a temporary measure to support new hardware before the patches are incorporated into the Linux kernel and the RUBIK Pi kernel. However, there are also patch sets for other purposes, such as enabling full kernel preemption to support real-time use."}),"\n",(0,i.jsx)(n.h3,{id:"confirm-your-kernel-version",children:"Confirm your kernel version"}),"\n",(0,i.jsx)(n.p,{children:"To check the kernel version currently running on your device, run the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"uname -r\n"})}),"\n",(0,i.jsx)(n.p,{children:"Before applying a patch, it is important to check the kernel version. In the kernel source directory, run the following command to check the kernel version:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"head Makefile -n 4\n"})}),"\n",(0,i.jsx)(n.p,{children:"An output similar to the following should appear."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"# SPDX-License-Identifier: GPL-2.0\r\nVERSION = 6\r\nPATCHLEVEL = 8\r\nSUBLEVEL = 12\n"})}),"\n",(0,i.jsx)(n.p,{children:"In this case, the source code is applicable for the 6.8.12 kernel."}),"\n",(0,i.jsx)(n.h3,{id:"apply-patches",children:"Apply patches"}),"\n",(0,i.jsx)(n.p,{children:"The application of the patch depends on the format in which the patch is distributed."}),"\n",(0,i.jsx)(n.p,{children:"Developers distribute most patches as single files. Use the patch utility to apply these patches. The following commands will download, extract, and use the real-time kernel patch to patch our example kernel version:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"wget https://www.kernel.org/pub/linux/kernel/projects/rt/6.8/patch-6.8.2-rt11.patch.gz\r\ngunzip patch-6.8.2-rt11.patch.gz\r\ncat patch-6.8.2-rt11.patch.gz | patch -p1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Some developers may distribute patches in the form of an email, which is a folder containing multiple patch files. Use Git to apply these patches.",(0,i.jsx)(n.br,{}),"\n","Before using Git to apply the email patches, configure the local Git installation with the name and email:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'git config --global user.name "your name"\r\ngit config --global user.email "your email"\n'})}),"\n",(0,i.jsx)(n.p,{children:"To apply the patches distributed via emails using Git, run the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"git am -3 /path/to/patches/*\n"})}),"\n",(0,i.jsx)(n.p,{children:"Be sure to follow the instructions provided by the patch distributor. For example, some patch sets may need to be applied against a specific commit."}),"\n",(0,i.jsx)(n.h3,{id:"kernel-header-files",children:"Kernel header files"}),"\n",(0,i.jsx)(n.p,{children:"To compile a kernel module, you need the Linux kernel header files. These header files provide the function and structure definitions required to build code that interfaces with the kernel."}),"\n",(0,i.jsxs)(n.p,{children:["If you cloned the entire kernel from GitHub, these header files are included in the source code tree. If you do not need all the extra files, use the ",(0,i.jsx)(n.code,{children:"apt"})," command to install only the kernel header files on RUBIK Pi 3."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"sudo apt install linux-headers-$(uname -r)\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"Installing the kernel header files may take a few minutes. There is no progress indicator during the installation."})}),"\n",(0,i.jsx)(n.h2,{id:"contribute-your-code",children:"Contribute your code"}),"\n",(0,i.jsx)(n.p,{children:"You may want to add something to the kernel for different reasons:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You have written some RUBIK Pi-specific code and want everyone to benefit from it."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You have written a generic Linux kernel driver for a device and want everyone to be able to use it."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You have fixed a generic kernel bug."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"You have fixed a RUBIK Pi-specific kernel bug."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For RUBIK Pi-specific changes or bug fixes, submit a Pull Request (PR) to the RUBIK Pi kernel. For general Linux kernel changes (such as new drivers), first submit a PR to the upstream Linux kernel. Once the Linux kernel accepts your changes, we will merge them into the RUBIK Pi kernel during kernel updates."}),"\n",(0,i.jsx)(n.h3,{id:"contribute-code-to-the-rubik-pi-kernel",children:"Contribute code to the RUBIK Pi kernel"}),"\n",(0,i.jsxs)(n.p,{children:["First, fork the ",(0,i.jsx)(n.a,{href:"https://github.com/rubikpi-ai/linux-ubuntu",children:"RUBIK Pi kernel repository"})," and clone it to your development device. Then, you can make changes, test them, and submit them to your forked repository."]}),"\n",(0,i.jsxs)(n.p,{children:["Next, submit a PR containing your changes to the ",(0,i.jsx)(n.a,{href:"https://github.com/rubikpi-ai/linux-ubuntu",children:"RUBIK Pi kernel repository"}),". RUBIK Pi engineers will review your contribution and provide feedback for improvements. Once approved, we will merge your changes, which will eventually be included in the stable version of the RUBIK Pi kernel."]}),"\n",(0,i.jsx)(n.h3,{id:"contribute-code-to-the-upstream-linux-kernel",children:"Contribute code to the upstream Linux kernel"}),"\n",(0,i.jsxs)(n.p,{children:["First, clone the ",(0,i.jsx)(n.a,{href:"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git",children:"Linux kernel tree"})," to your development device. Then, you can make changes, test them, and commit them to your local tree."]}),"\n",(0,i.jsxs)(n.p,{children:["When your changes are ready, submit them to the Linux kernel community. Linux kernel development is conducted through mailing lists, not on GitHub, so email your patches to the community. Please follow the guidelines described in ",(0,i.jsx)(n.a,{href:"https://www.kernel.org/doc/html/latest/process/submitting-patches.html",children:"Submitting patches: the essential guide to getting your code into the kernel"})," and ",(0,i.jsx)(n.a,{href:"https://www.kernel.org/doc/html/latest/process/coding-style.html",children:"Linux kernel coding style"}),". Linux kernel contributors will review your contribution and provide feedback for improvements. Once approved, they will merge your changes. Eventually, these changes will make it into a long-term Linux kernel release. Once we've tested that the long-term release is compatible with the RUBIK Pi kernel, your changes will be included in the stable version of the RUBIK Pi kernel."]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},15993:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/20250713-195811-e241faacabfdd16db6fdf848233da7b8.jpg"},19365:(e,n,r)=>{r.d(n,{A:()=>s});r(96540);var t=r(34164);const i={tabItem:"tabItem_Ymn6"};var l=r(74848);function s({children:e,hidden:n,className:r}){return(0,l.jsx)("div",{role:"tabpanel",className:(0,t.A)(i.tabItem,r),hidden:n,children:e})}},25779:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/CompileDiagram-8b62bf43f82626fc212221405dd6a471.PNG"},28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(96540);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);