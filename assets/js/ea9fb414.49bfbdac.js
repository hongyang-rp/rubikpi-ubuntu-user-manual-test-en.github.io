"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1377],{1457:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/IMSDK_2-43c29ca5f49e28acd6c61bd8669a4809.png"},25210:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/IMSDK_1-4d8561f82f0209429c819a43f2714a8f.png"},43023:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(63696);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},44632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Document Home/Application Development and Execution Guide/IMSDK-Sample-Applications/index","title":"Qualcomm\xae IM SDK","description":"The Qualcomm\xae Intelligent Multimedia SDK (IM SDK) is a set of GStreamer plugins that let you run computer vision operations on the GPU of your Dragonwing development board; and that can create AI pipelines that run fully on GPU and NPU, without ever having to yield back to the CPU (zero-copy). Together this makes it possible to achieve much higher throughput rates than when you implement AI CV pipelines yourself in e.g. OpenCV + TFLite.","source":"@site/docs/Document Home/2.Application Development and Execution Guide/3.IMSDK-Sample-Applications/index.md","sourceDirName":"Document Home/2.Application Development and Execution Guide/3.IMSDK-Sample-Applications","slug":"/Document Home/Application Development and Execution Guide/IMSDK-Sample-Applications/","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Application Development and Execution Guide/IMSDK-Sample-Applications/","draft":false,"unlisted":false,"editUrl":"https://github.com/hongyang-rp/rubikpi-ubuntu-user-manual-test-en.github.io/tree/main/docs/Document Home/2.Application Development and Execution Guide/3.IMSDK-Sample-Applications/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Genie","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Application Development and Execution Guide/Framework-Driven AI Sample Execution/genie"},"next":{"title":"C/C++ Prebuilt Sample Applications","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/Application Development and Execution Guide/IMSDK-Sample-Applications/Prebuilt Sample Applications"}}');var a=t(62540),r=t(43023);const s={},o="Qualcomm\xae IM SDK",l={},d=[{value:"GStreamer Pipelines with IM SDK",id:"gstreamer-pipelines-with-im-sdk",level:2},{value:"Setting up GStreamer and the IM SDK",id:"setting-up-gstreamer-and-the-im-sdk",level:2},{value:"Ex 1: Resizing and cropping on GPU vs. CPU",id:"ex-1-resizing-and-cropping-on-gpu-vs-cpu",level:3},{value:"Ex 2: Tee&#39;ing streams and multiple outputs",id:"ex-2-teeing-streams-and-multiple-outputs",level:3},{value:"Ex 3: Run a neural network",id:"ex-3-run-a-neural-network",level:3},{value:"3.1: Neural network and compositing in Python",id:"31-neural-network-and-compositing-in-python",level:4},{value:"3.2: Running the neural network with IM SDK",id:"32-running-the-neural-network-with-im-sdk",level:4},{value:"3.3: Overlays",id:"33-overlays",level:4},{value:"3.4: Combining neural network with overlay",id:"34-combining-neural-network-with-overlay",level:4},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Pipeline does not yield anything",id:"pipeline-does-not-yield-anything",level:4},{value:"QMMF Recorder StartCamera Failed / Failed to Open Camera",id:"qmmf-recorder-startcamera-failed--failed-to-open-camera",level:4}];function m(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"qualcomm-im-sdk",children:"Qualcomm\xae IM SDK"})}),"\n",(0,a.jsx)(n.p,{children:"The Qualcomm\xae Intelligent Multimedia SDK (IM SDK) is a set of GStreamer plugins that let you run computer vision operations on the GPU of your Dragonwing development board; and that can create AI pipelines that run fully on GPU and NPU, without ever having to yield back to the CPU (zero-copy). Together this makes it possible to achieve much higher throughput rates than when you implement AI CV pipelines yourself in e.g. OpenCV + TFLite."}),"\n",(0,a.jsx)(n.h2,{id:"gstreamer-pipelines-with-im-sdk",children:"GStreamer Pipelines with IM SDK"}),"\n",(0,a.jsxs)(n.p,{children:["The Intelligent Multimedia SDK (IM SDK) is built on top of GStreamer, a powerful multimedia framework that enables developers to define video and audio processing workflows as pipelines. Instead of manually coding each step\u2014like capturing frames, resizing, cropping, running inference, and rendering output\u2014GStreamer allows you to declare the entire sequence in a single pipeline string. The framework then handles execution, synchronization, and data flow automatically.",(0,a.jsx)(n.br,{}),"\n","IM SDK enhances this experience on Qualcomm\xae hardware by enabling seamless acceleration across the pipeline. Tasks such as image resizing, cropping, and overlay rendering are offloaded to the GPU, while inference operations are executed on the NPU. This zero-copy architecture ensures that data flows through the pipeline without unnecessary CPU intervention, resulting in real-time performance and reduced system load.",(0,a.jsx)(n.br,{}),"\n","To support this, IM SDK provides specialized GStreamer plugins:"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"qtivtransform"}),": Accelerates color conversion, cropping, and resizing using the GPU.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.code,{children:"qtimltflite"}),": Executes TensorFlow Lite models on the NPU."]}),"\n",(0,a.jsx)(n.p,{children:"By integrating these plugins, developers can build high-performance multimedia applications using familiar GStreamer syntax\u2014while benefiting from hardware acceleration under the hood."}),"\n",(0,a.jsx)(n.h2,{id:"setting-up-gstreamer-and-the-im-sdk",children:"Setting up GStreamer and the IM SDK"}),"\n",(0,a.jsx)(n.p,{children:"Alright, let's go build some applications using the IM SDK."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Install GStreamer, the IM SDK and some extra dependencies we'll need in this example. Open the terminal on your development board, or an ssh session to your development board, and run:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Add the Qualcomm IoT PPA\nsudo apt-add-repository -y ppa:ubuntu-qcom-iot/qcom-ppa\n\n# Install GStreamer / IM SDK\nsudo apt update\nsudo apt install -y gstreamer1.0-tools gstreamer1.0-tools gstreamer1.0-plugins-good gstreamer1.0-plugins-base gstreamer1.0-plugins-base-apps gstreamer1.0-plugins-qcom-good gstreamer1.0-qcom-sample-apps\n\n# Install Python bindings for GStreamer, and some build dependencies\nsudo apt install -y v4l-utils libcairo2-dev pkg-config python3-dev libgirepository1.0-dev gir1.2-gstreamer-1.0\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Clone the example repo, create a venv, and install its dependencies:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Clone repo\ngit clone https://github.com/edgeimpulse/qc-ai-docs-examples-imsdk.git\ncd qc-ai-docs-examples-imsdk/tutorial\n\n# Create a new venv\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Install Python dependencies\npip3 install -r requirements.txt\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"You'll need a camera (either built-in, on the RB3 Gen 2 Vision Kit) or a USB webcam."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"If you want to use a USB webcam:"}),"\n",(0,a.jsx)(n.p,{children:"Find out the device ID:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"v4l2-ctl --list-devices\n# msm_vidc_media (platform:aa00000.video-codec):\n#         /dev/media0\n#\n# msm_vidc_decoder (platform:msm_vidc_bus):\n#         /dev/video32\n#         /dev/video33\n#\n# C922 Pro Stream Webcam (usb-0000:01:00.0-2):\n#         /dev/video2     <-- So /dev/video2\n#         /dev/video3\n#         /dev/media3\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:"Set the environment variable (we'll use this in our examples):"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'export IMSDK_VIDEO_SOURCE="v4l2src device=/dev/video2"\n'})}),"\n",(0,a.jsx)(n.p,{children:"If you're on the RB3 Gen 2 Vision Kit, and want to use the built-in camera:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'export IMSDK_VIDEO_SOURCE="qtiqmmfsrc name=camsrc camera=0"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"ex-1-resizing-and-cropping-on-gpu-vs-cpu",children:"Ex 1: Resizing and cropping on GPU vs. CPU"}),"\n",(0,a.jsx)(n.p,{children:"Let's show how much faster working on the GPU can be compared to the CPU. If you have a neural network that expects a 224x224 RGB input, you'll need to preprocess your data: first, grab the frame from the webcam (e.g. native resolution is 1980x1080), then crop it to a 1/1 aspect ratio (e.g. crop to 1080x1080), then resize to the desired resolution (224x224), and then create a Numpy array from the pixels."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"ex1.py"}),", and add:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from gst_helper import gst_grouped_frames, atomic_save_image, timing_marks_to_str\nimport time, argparse\n\nparser = argparse.ArgumentParser(description='GStreamer -> Python RGB frames')\nparser.add_argument('--video-source', type=str, required=True, help='GStreamer video source (e.g. \"v4l2src device=/dev/video2\" or \"qtiqmmfsrc name=camsrc camera=0\")')\nargs, unknown = parser.parse_known_args()\n\nPIPELINE = (\n    # Video source\n    f\"{args.video_source} ! \"\n    # Properties for the video source\n    \"video/x-raw,width=1920,height=1080 ! \"\n    # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n    \"identity name=frame_ready_webcam silent=false ! \"\n    # Crop to square\n    \"videoconvert ! aspectratiocrop aspect-ratio=1/1 ! \"\n    # Scale to 224x224 and RGB\n    \"videoscale ! video/x-raw,format=RGB,width=224,height=224 ! \"\n    # Event when the crop/scale are done\n    \"identity name=transform_done silent=false ! \"\n    # Send out the resulting frame to an appsink (where we can pick it up from Python)\n    \"queue max-size-buffers=2 leaky=downstream ! \"\n    \"appsink name=frame drop=true sync=false max-buffers=1 emit-signals=true\"\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE):\n    print(f\"Frame ready\")\n    print('    Data:', end='')\n    for key in list(frames_by_sink):\n        print(f' name={key} {frames_by_sink[key].shape}', end='')\n    print('')\n    print('    Timings:', timing_marks_to_str(marks))\n\n    # Save image to disk, frames_by_sink has all the\n    frame = frames_by_sink['frame']\n    atomic_save_image(frame=frame, path='out/gstreamer.png')\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Let's run this. This pipeline runs on the CPU (using vanilla GStreamer components):"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'python\npython3 ex1.py --video-source "$IMSDK_VIDEO_SOURCE"\n\n# Frame ready\n#     Data: name=frame (224, 224, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 17.89ms, transform_done\u2192pipeline_finished: 1.89ms (total 19.78ms)\n# Frame ready\n#     Data: name=frame (224, 224, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 18.01ms, transform_done\u2192pipeline_finished: 1.42ms (total 19.44ms)\n'})}),"\n",(0,a.jsx)(n.p,{children:"Here you see the resize/crop takes 18ms., for a total of ~20ms. per frame processing time (measured on RB3 with the built-in camera)."}),"\n",(0,a.jsx)(n.p,{children:"Now let's make this run on the GPU instead... Replace:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    # Crop to square\n    "videoconvert ! aspectratiocrop aspect-ratio=1/1 ! "\n    # Scale to 224x224 and RGB\n    "videoscale ! video/x-raw,format=RGB,width=224,height=224 ! "\n'})}),"\n",(0,a.jsx)(n.p,{children:"With:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'    # Crop (square), the crop syntax is (`<X, Y, WIDTH, HEIGHT >`).\n    # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n    f\'qtivtransform crop="<420, 0, 1080, 1080>" ! \'\n    # then resize to 224x224\n    "video/x-raw,format=RGB,width=224,height=224 ! "\n'})}),"\n",(0,a.jsx)(n.p,{children:"Run this again:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'python3 ex1.py --video-source "$IMSDK_VIDEO_SOURCE"\n\n# Frame ready\n#     Data: name=frame (224, 224, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 2.48ms, transform_done\u2192pipeline_finished: 1.64ms (total 4.13ms)\n# Frame ready\n#     Data: name=frame (224, 224, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 1.93ms, transform_done\u2192pipeline_finished: 1.26ms (total 3.19ms)\n'})}),"\n",(0,a.jsx)(n.p,{children:"\ud83d\ude80 You've now sped up the crop/resize operation by 9 times; with just two lines of code."}),"\n",(0,a.jsx)(n.h3,{id:"ex-2-teeing-streams-and-multiple-outputs",children:"Ex 2: Tee'ing streams and multiple outputs"}),"\n",(0,a.jsx)(n.p,{children:"So... in the pipeline above you've seen a few elements that will be relevant when interacting with your own code:"}),"\n",(0,a.jsxs)(n.p,{children:["Identity elements (e.g. ",(0,a.jsx)(n.code,{children:"identity name=frame_ready_webcam silent=false"}),"). These can be used to debug timing in a pipeline. The timestamp when they're emitted is saved, and then returned at the end of the pipeline in the 'marks' element (k/v pair, key is the identity name, value is the timestamp)."]}),"\n",(0,a.jsxs)(n.p,{children:["Appsink elements (e.g. ",(0,a.jsx)(n.code,{children:"appsink name=frame"}),"). These are used to send data from a GStreamer pipeline to your application. Here the element before the appsink is a ",(0,a.jsx)(n.code,{children:"video/x-raw,format=RGB,width=224,height=224"})," - so we'll send a 224x224 RGB array to Python. You receive these in the ",(0,a.jsx)(n.code,{children:"frames_by_sink"})," element (k/v pair, key is the appsink name, value is the data)."]}),"\n",(0,a.jsxs)(n.p,{children:["You can have multiple appsinks per pipeline. For example, you might want to grab the original 1920x1080 image as well. In that case you can split the pipeline up in two parts, right after ",(0,a.jsx)(n.code,{children:"identity name=frame_ready_webcam"}),"; and send one part to a new appsink; and the other part through the resize/crop pipeline."]}),"\n",(0,a.jsxs)(n.p,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"ex2.py"})," and add:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from gst_helper import gst_grouped_frames, atomic_save_image, timing_marks_to_str\nimport time, argparse\n\nparser = argparse.ArgumentParser(description=`GStreamer -> Python RGB frames`)\nparser.add_argument(`--video-source`, type=str, required=True, help=`GStreamer video source (e.g. "v4l2src device=/dev/video2" or "qtiqmmfsrc name=camsrc camera=0")`)\nargs, unknown = parser.parse_known_args()\n\nPIPELINE = (\n    # Video source\n    f"{args.video_source} ! "\n    # Properties for the video source\n    "video/x-raw,width=1920,height=1080 ! "\n    # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n    "identity name=frame_ready_webcam silent=false ! "\n\n    # Split the stream\n    "tee name=t "\n\n    # Branch A) convert to RGB and send to original appsink\n        "t. ! queue max-size-buffers=1 leaky=downstream ! "\n        "qtivtransform ! video/x-raw,format=RGB ! "\n        "appsink name=original drop=true sync=false max-buffers=1 emit-signals=true "\n\n    # Branch B) resize/crop to 224x224 -> send to another appsink\n        "t. ! queue max-size-buffers=1 leaky=downstream ! "\n        # Crop (square), the crop syntax is (\'<X, Y, WIDTH, HEIGHT >\').\n        # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n        f\'qtivtransform crop="<420, 0, 1080, 1080>" ! \'\n        # then resize to 224x224\n        "video/x-raw,format=RGB,width=224,height=224 ! "\n        # Event when the crop/scale are done\n        "identity name=transform_done silent=false ! "\n        # Send out the resulting frame to an appsink (where we can pick it up from Python)\n        "queue max-size-buffers=2 leaky=downstream ! "\n        "appsink name=frame drop=true sync=false max-buffers=1 emit-signals=true "\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE):\n    print(f"Frame ready")\n    print(\'    Data:\', end=\'\')\n    for key in list(frames_by_sink):\n        print(f\' name={key} {frames_by_sink[key].shape}\', end=\'\')\n    print(\'\')\n    print(\'    Timings:\', timing_marks_to_str(marks))\n\n    # Save image to disk\n    frame = frames_by_sink[\'frame\']\n    atomic_save_image(frame=frame, path=\'out/imsdk.png\')\n    original = frames_by_sink[\'original\']\n    atomic_save_image(frame=original, path=\'out/imsdk_original.png\')\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Run this:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-Python",children:'python3 ex2.py --video-source "$IMSDK_VIDEO_SOURCE"\n\n# Frame ready\n#     Data: name=frame (224, 224, 3) name=original (1080, 1920, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 1.79ms, transform_done\u2192pipeline_finished: 4.75ms (total 6.54ms)\n# Frame ready\n#     Data: name=frame (224, 224, 3) name=original (1080, 1920, 3)\n#     Timings: frame_ready_webcam\u2192transform_done: 3.63ms, transform_done\u2192pipeline_finished: 3.59ms (total 7.22ms)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["(The ",(0,a.jsx)(n.code,{children:"out/"})," directory has the last processed frames in both original and resized resolutions)"]}),"\n",(0,a.jsx)(n.p,{children:"Alright! That gives you two outputs from a single pipeline. Now you know how to construct more complex applications in a single pipeline."}),"\n",(0,a.jsx)(n.h3,{id:"ex-3-run-a-neural-network",children:"Ex 3: Run a neural network"}),"\n",(0,a.jsx)(n.p,{children:"Now that we have images streaming from the webcam in the correct resolution, let's add a neural network to the mix."}),"\n",(0,a.jsx)(n.h4,{id:"31-neural-network-and-compositing-in-python",children:"3.1: Neural network and compositing in Python"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["First we'll do a ",(0,a.jsx)(n.code,{children:"normal"})," implementation, where take the resized frame from the IM SDK pipeline, and then use ",(0,a.jsx)(n.a,{href:"https://qc-ai-test.gitbook.io/qc-ai-test-docs/running-building-ai-models/lite-rt",children:"LiteRT"})," to run the model (on the NPU). Afterwards we'll then we'll the draw the top conclusion on the image and write it to disk. Create a new file ",(0,a.jsx)(n.code,{children:"ex3_from_python.py"})," and add:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from gst_helper import gst_grouped_frames, atomic_save_pillow_image, timing_marks_to_str, download_file_if_needed, softmax\nimport time, argparse, numpy as np\nfrom ai_edge_litert.interpreter import Interpreter, load_delegate\nfrom PIL import ImageDraw, Image\n\nparser = argparse.ArgumentParser(description='GStreamer -> SqueezeNet')\nparser.add_argument('--video-source', type=str, required=True, help='GStreamer video source (e.g. \"v4l2src device=/dev/video2\" or \"qtiqmmfsrc name=camsrc camera=0\")')\nargs, unknown = parser.parse_known_args()\n\nMODEL_PATH = download_file_if_needed('models/squeezenet1_1-squeezenet-1.1-w8a8.tflite', 'https://cdn.edgeimpulse.com/qc-ai-docs/models/squeezenet1_1-squeezenet-1.1-w8a8.tflite')\nLABELS_PATH = download_file_if_needed('models/SqueezeNet-1.1_labels.txt', 'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_labels.txt')\n\n# Parse labels\nwith open(LABELS_PATH, 'r') as f:\n    labels = [line for line in f.read().splitlines() if line.strip()]\n\n# Load TFLite model and allocate tensors, note: this is a 224x224 model with uint8 input!\n# If your models are different, then you'll need to update the pipeline below.\ninterpreter = Interpreter(\n    model_path=MODEL_PATH,\n    experimental_delegates=[load_delegate(\"libQnnTFLiteDelegate.so\", options={\"backend_type\": \"htp\"})]     # Use NPU\n)\ninterpreter.allocate_tensors()\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n\nPIPELINE = (\n    # Video source\n    f\"{args.video_source} ! \"\n    # Properties for the video source\n    \"video/x-raw,width=1920,height=1080 ! \"\n    # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n    \"identity name=frame_ready_webcam silent=false ! \"\n    # Crop (square), the crop syntax is ('<X, Y, WIDTH, HEIGHT >').\n    # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n    f'qtivtransform crop=\"<420, 0, 1080, 1080>\" ! '\n    # then resize to 224x224\n    \"video/x-raw,format=RGB,width=224,height=224 ! \"\n    # Event when the crop/scale are done\n    \"identity name=transform_done silent=false ! \"\n    # Send out the resulting frame to an appsink (where we can pick it up from Python)\n    \"queue max-size-buffers=2 leaky=downstream ! \"\n    \"appsink name=frame drop=true sync=false max-buffers=1 emit-signals=true \"\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE):\n    print(f\"Frame ready\")\n    print('    Data:', end='')\n    for key in list(frames_by_sink):\n        print(f' name={key} {frames_by_sink[key].shape}', end='')\n    print('')\n\n    # Begin inference timer\n    inference_start = time.perf_counter()\n\n    # Set tensor with the image received in \"frames_by_sink['frame']\", add batch dim, and run inference\n    interpreter.set_tensor(input_details[0]['index'], frames_by_sink['frame'].reshape((1, 224, 224, 3)))\n    interpreter.invoke()\n\n    # Get prediction (dequantized)\n    q_output = interpreter.get_tensor(output_details[0]['index'])\n    scale, zero_point = output_details[0]['quantization']\n    f_output = (q_output.astype(np.float32) - zero_point) * scale\n\n    # Image classification models in AI Hub miss a Softmax() layer at the end of the model, so add it manually\n    scores = softmax(f_output[0])\n\n    # End inference timer\n    inference_end = time.perf_counter()\n\n    # Add an extra mark, so we have timing info for the complete pipeline\n    marks['inference_done'] = list(marks.items())[-1][1] + (inference_end - inference_start)\n\n    # Print top-5 predictions\n    top_k = scores.argsort()[-5:][::-1]\n    print(f\"    Top-5 predictions:\")\n    for i in top_k:\n        print(f\"        Class {labels[i]}: score={scores[i]}\")\n\n    # Image composition timer\n    image_composition_start = time.perf_counter()\n\n    # Add the top 5 scores to the image, and save image to disk (for debug purposes)\n    frame = frames_by_sink['frame']\n    img = Image.fromarray(frame)\n    img_draw = ImageDraw.Draw(img)\n    img_draw.text((10, 10), f\"{labels[top_k[0]]} ({scores[top_k[0]]:.2f})\", fill=\"black\")\n    atomic_save_pillow_image(img=img, path='out/imsdk_with_prediction.png')\n\n    image_composition_end = time.perf_counter()\n\n    # Add an extra mark, so we have timing info for the complete pipeline\n    marks['image_composition_end'] = list(marks.items())[-1][1] + (image_composition_end - image_composition_start)\n\n    print('    Timings:', timing_marks_to_str(marks))\n\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Now run this application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# We use \'| grep -v "<W>"\' to filter out some warnings - you can omit it if you want.\npython3 ex3_from_python.py --video-source "$IMSDK_VIDEO_SOURCE" | grep -v "<W>"\n\n# Frame ready\n# Data: name=frame (224, 224, 3)\n# Top-5 predictions:\n#     Class grand piano: score=0.236373171210289\n#     Class studio couch: score=0.06304315477609634\n#     Class dining table: score=0.04321642965078354\n#     Class umbrella: score=0.04321642965078354\n#     Class quilt: score=0.035781171172857285\n# Timings: frame_ready_webcam\u2192transform_done: 2.59ms, transform_done\u2192pipeline_finished: 1.52ms, pipeline_finished\u2192inference_done: 1.14ms, inference_done\u2192image_composition_end: 24.84ms (total 30.09ms)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Image classification model with an overlay",src:t(25210).A+"",width:"408",height:"414"})}),"\n",(0,a.jsx)(n.p,{children:"Absolutely not bad, but let's see if we can do better..."}),"\n",(0,a.jsx)(n.h4,{id:"32-running-the-neural-network-with-im-sdk",children:"3.2: Running the neural network with IM SDK"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"TODO: What does mobilenet mean when calling the classifier. I assume it does some normalization"})}),"\n",(0,a.jsxs)(n.p,{children:["Let's move the neural network inference to the IM SDK. You do this through three plugins:",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.code,{children:"qtimlvconverter"})," - to convert the frame into an input tensor."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"qtimltflite"})," - to run a neural network (in LiteRT format). If you send these results over an appsink you'll get the exact same tensor back as earlier (you just didn't need to hit the CPU to invoke the inference engine)."]}),"\n",(0,a.jsxs)(n.p,{children:["An element like ",(0,a.jsx)(n.code,{children:"qtimlvclassification"})," to interpret the output. Here this plugin is made for image classification usecases (like the SqueezeNet model we use) with a '(1, n)' shape. This plugin spits either text out (with the predictions), or it spits an overlay out (to draw onto the original image)."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"This element has a particular labels format (see below)."}),"\n"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"ex3_nn_imsdk.py"})," and add:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from gst_helper import gst_grouped_frames, atomic_save_pillow_image, timing_marks_to_str, download_file_if_needed, softmax\nimport time, argparse, numpy as np\nfrom ai_edge_litert.interpreter import Interpreter, load_delegate\nfrom PIL import ImageDraw, Image\n\nparser = argparse.ArgumentParser(description='GStreamer -> SqueezeNet')\nparser.add_argument('--video-source', type=str, required=True, help='GStreamer video source (e.g. \"v4l2src device=/dev/video2\" or \"qtiqmmfsrc name=camsrc camera=0\")')\nargs, unknown = parser.parse_known_args()\n\nMODEL_PATH = download_file_if_needed('models/squeezenet1_1-squeezenet-1.1-w8a8.tflite', 'https://cdn.edgeimpulse.com/qc-ai-docs/models/squeezenet1_1-squeezenet-1.1-w8a8.tflite')\nLABELS_PATH = download_file_if_needed('models/SqueezeNet-1.1_labels.txt', 'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_labels.txt')\n\n# Parse labels\nwith open(LABELS_PATH, 'r') as f:\n    labels = [line for line in f.read().splitlines() if line.strip()]\n\n# IM SDK expects labels in this format\n# (structure)\"white-shark,id=(guint)0x3,color=(guint)0x00FF00FF;\" (so no spaces in the name)\nIMSDK_LABELS_PATH = 'models/SqueezeNet-1.1_imsdk_labels.txt'\nwith open(IMSDK_LABELS_PATH, 'w') as f:\n    imsdk_labels_content = []\n    for i in range(0, len(labels)):\n        label = labels[i]\n        label = label.replace(' ', '-') # no space allowed\n        label = label.replace(\"'\", '') # no ' allowed\n        imsdk_labels_content.append(f'(structure)\"{label},id=(guint){hex(i)},color=(guint)0x00FF00FF;\"')\n    f.write('\\n'.join(imsdk_labels_content))\n\n# Load TFLite model and allocate tensors, note: this is a 224x224 model with uint8 input!\n# If your models are different, then you'll need to update the pipeline below.\ninterpreter = Interpreter(\n    model_path=MODEL_PATH,\n    experimental_delegates=[load_delegate(\"libQnnTFLiteDelegate.so\", options={\"backend_type\": \"htp\"})]     # Use NPU\n)\ninterpreter.allocate_tensors()\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\nscale, zero_point = output_details[0]['quantization']\n\nPIPELINE = (\n    # Video source\n    f\"{args.video_source} ! \"\n    # Properties for the video source\n    \"video/x-raw,width=1920,height=1080 ! \"\n    # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n    \"identity name=frame_ready_webcam silent=false ! \"\n    # Crop (square), the crop syntax is ('<X, Y, WIDTH, HEIGHT >').\n    # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n    f'qtivtransform crop=\"<420, 0, 1080, 1080>\" ! '\n    # then resize to 224x224, (!! NOTE: here you need to use format=NV12 to get a tightly packed buffer - if you use RGB this won't work !!)\n    \"video/x-raw,width=224,height=224,format=NV12 ! \"\n    # Event when the crop/scale are done\n    \"identity name=transform_done silent=false ! \"\n\n    # turn into right format (UINT8 data type) and add batch dimension\n    'qtimlvconverter ! neural-network/tensors,type=UINT8,dimensions=<<1,224,224,3>> ! '\n    # Event when conversion is done\n    \"identity name=conversion_done silent=false ! \"\n    # run inference (using the QNN delegates to run on NPU)\n    f'qtimltflite delegate=external external-delegate-path=libQnnTFLiteDelegate.so external-delegate-options=\"QNNExternalDelegate,backend_type=htp;\" model=\"{MODEL_PATH}\" ! '\n    # Event when inference is done\n    \"identity name=inference_done silent=false ! \"\n\n    # Run the classifier (add softmax, as AI Hub models miss it), this will return the top n labels (above threshold, min. threshold is 10)\n    # note that you also need to pass the quantization params (see below under the \"gst_grouped_frames\" call).\n    f'qtimlvclassification name=cls module=mobilenet extra-operation=softmax threshold=10 results=1 labels=\"{IMSDK_LABELS_PATH}\" ! '\n    \"identity name=classification_done silent=false ! \"\n\n    # The qtimlvclassification can either output a video/x-raw,format=BGRA,width=224,height=224 element (overlay),\n    # or a text/x-raw element (raw text) - here we want the text\n    \"text/x-raw,format=utf8 ! \"\n\n    # Send to application\n    \"queue max-size-buffers=2 leaky=downstream ! \"\n    'appsink name=qtimlvclassification_text drop=true sync=false max-buffers=1 emit-signals=true '\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE, element_properties={\n    # the qtimlvclassification element does not like these variables passed in as a string in the pipeline, so set them like this\n    'cls': { 'constants': f'Mobilenet,q-offsets=<{zero_point}>,q-scales=<{scale}>' }\n}):\n    print(f\"Frame ready\")\n    print('    Data:', end='')\n    for key in list(frames_by_sink):\n        print(f' name={key} {frames_by_sink[key].shape} ({frames_by_sink[key].dtype})', end='')\n    print('')\n\n    # Grab the qtimlvclassification_text (utf8 text) with predictions from IM SDK\n    qtimlvclassification_text = frames_by_sink['qtimlvclassification_text'].tobytes().decode(\"utf-8\")\n    print('    qtimlvclassification_text:', qtimlvclassification_text)\n\n    print('    Timings:', timing_marks_to_str(marks))\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["NV12: We switched from ",(0,a.jsx)(n.code,{children:"RGB"})," to ",(0,a.jsx)(n.code,{children:"NV12"})," format here (after ",(0,a.jsx)(n.code,{children:"qtivtransform"}),"), as ",(0,a.jsx)(n.code,{children:"qtimltflite"})," requires a tightly packed buffer - and the RGB output uses row-stride padding. These issues can be very hard to debug... Add ",(0,a.jsx)(n.code,{children:"GST_DEBUG=3"})," before your command (e.g. ",(0,a.jsx)(n.code,{children:"GST_DEBUG=3 python3 ex3_nn_imsdk.py"}),") and feed the pipeline and error into an LLM like ChatGPT can sometimes help."]})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Now run this application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# We use \'| grep -v "<W>"\' to filter out some warnings - you can omit it if you want.\npython3 ex3_nn_imsdk.py --video-source "$IMSDK_VIDEO_SOURCE" | grep -v "<W>"\n\n# Frame ready\n#     Data: name=qtimlvclassification_text (337,) (uint8)\n#     qtimlvclassification_text: { (structure)"ImageClassification\\,\\ batch-index\\=\\(uint\\)0\\,\\ labels\\=\\(structure\\)\\<\\ \\"grand.piano\\\\\\,\\\\\\ id\\\\\\=\\\\\\(uint\\\\\\)256\\\\\\,\\\\\\ confidence\\\\\\=\\\\\\(double\\\\\\)52.870616912841797\\\\\\,\\\\\\ color\\\\\\=\\\\\\(uint\\\\\\)16711935\\\\\\;\\"\\ \\>\\,\\ timestamp\\=\\(guint64\\)1471167589\\,\\ sequence-index\\=\\(uint\\)1\\,\\ sequence-num-entries\\=\\(uint\\)1\\;" }\n#     Timings: frame_ready_webcam\u2192transform_done: 3.86ms, transform_done\u2192inference_done: 4.04ms, inference_done\u2192pipeline_finished: 0.74ms (total 8.65ms)\n'})}),"\n",(0,a.jsx)(n.p,{children:"OK! The model now runs on the NPU inside the IM SDK pipeline. If you rather have the top 5 outputs (like we did in 3.1), you can tee the stream after the 'qtimltflite' element and send the raw output tensor back to the application as well."}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.mdxAdmonitionTitle,{}),(0,a.jsxs)(n.p,{children:["Overlay image: If you want to see the overlay image, rather than the text, see ",(0,a.jsx)(n.code,{children:"tutorial/_ex3_nn_imsdk_show_overlay.py"}),"."]})]}),"\n",(0,a.jsx)(n.h4,{id:"33-overlays",children:"3.3: Overlays"}),"\n",(0,a.jsxs)(n.p,{children:["To mimic the output in 3.1 we also want to draw an overlay. Let's first demonstrate that with a static overlay image.",(0,a.jsx)(n.br,{}),"\n","1.\nDownload a semi-transparent image ",(0,a.jsx)(n.a,{href:"https://commons.wikimedia.org/wiki/File:PNG_transparency_demonstration_2.png",children:"source"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"mkdir -p images\nwget -O images/imsdk-transparent-static.png https://cdn.edgeimpulse.com/qc-ai-docs/example-images/imsdk-transparent-static.png\n"})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"ex3_overlay.py"})," and add:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from gst_helper import gst_grouped_frames, atomic_save_image, timing_marks_to_str, download_file_if_needed, softmax\nimport time, argparse, numpy as np\nfrom ai_edge_litert.interpreter import Interpreter, load_delegate\nfrom PIL import ImageDraw, Image\n\nparser = argparse.ArgumentParser(description=\'GStreamer -> SqueezeNet\')\nparser.add_argument(\'--video-source\', type=str, required=True, help=\'GStreamer video source (e.g. "v4l2src device=/dev/video2" or "qtiqmmfsrc name=camsrc camera=0")\')\nargs, unknown = parser.parse_known_args()\n\nif args.video_source.strip() == \'\':\n    raise Exception(\'--video-source is empty, did you not set the IMSDK_VIDEO_SOURCE env variable? E.g.:\\n\' +\n    \'    export IMSDK_VIDEO_SOURCE="v4l2src device=/dev/video2"\')\n\n# Source: https://commons.wikimedia.org/wiki/File:Arrow_png_image.png\nOVERLAY_IMAGE = download_file_if_needed(\'images/imsdk-transparent-static.png\', \'https://cdn.edgeimpulse.com/qc-ai-docs/example-images/imsdk-transparent-static.png\')\nOVERLAY_WIDTH = 128\nOVERLAY_HEIGHT = 96\n\nPIPELINE = (\n    # Part 1: Create a qtivcomposer with two sinks (we\'ll write webcam to sink 0, overlay to sink 1)\n    "qtivcomposer name=comp sink_0::zorder=0 "\n        # Sink 1 (the overlay) will be at x=10, y=10; and sized 128x96\n        f"sink_1::zorder=1 sink_1::alpha=1.0 sink_1::position=<10,10> sink_1::dimensions=<{OVERLAY_WIDTH},{OVERLAY_HEIGHT}> ! "\n    "videoconvert ! "\n    "video/x-raw,format=RGBA,width=224,height=224 ! "\n    # Write frames to appsink\n    "appsink name=overlay_raw drop=true sync=false max-buffers=1 emit-signals=true "\n\n    # Part 2: Grab image from webcam and write the composer\n        # Video source\n        f"{args.video_source} ! "\n        # Properties for the video source\n        "video/x-raw,width=1920,height=1080 ! "\n        # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n        "identity name=frame_ready_webcam silent=false ! "\n        # Crop (square), the crop syntax is (\'<X, Y, WIDTH, HEIGHT >\').\n        # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n        f\'qtivtransform crop="<420, 0, 1080, 1080>" ! \'\n        # then resize to 224x224\n        "video/x-raw,width=224,height=224,format=NV12 ! "\n        # Event when the crop/scale are done\n        "identity name=transform_done silent=false ! "\n        # Write to sink 0 on the composer\n        "comp.sink_0 "\n\n    # Part 3: Load overlay from disk and write to composer (sink 1)\n        # Image (statically from disk)\n        f\'filesrc location="{OVERLAY_IMAGE}" ! \'\n        # Decode PNG\n        "pngdec ! "\n        # Turn into a video (scaled to 128x96, RGBA format so we keep transparency, requires a framerate)\n        "imagefreeze ! "\n        "videoscale ! "\n        "videoconvert ! "\n        f"video/x-raw,format=RGBA,width={OVERLAY_WIDTH},height={OVERLAY_HEIGHT},framerate=30/1 ! "\n        # Write to sink 1 on the composer\n        "comp.sink_1 "\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE):\n    print(f"Frame ready")\n    print(\'    Data:\', end=\'\')\n    for key in list(frames_by_sink):\n        print(f\' name={key} {frames_by_sink[key].shape} ({frames_by_sink[key].dtype})\', end=\'\')\n    print(\'\')\n\n    # Save image to disk\n    save_image_start = time.perf_counter()\n    frame = frames_by_sink[\'overlay_raw\']\n    atomic_save_image(frame=frame, path=\'out/webcam_with_overlay.png\')\n    save_image_end = time.perf_counter()\n\n    # Add an extra mark, so we have timing info for the complete pipeline\n    marks[\'save_image_end\'] = list(marks.items())[-1][1] + (save_image_end - save_image_start)\n\n    print(\'    Timings:\', timing_marks_to_str(marks))\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"Run this application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# We use \'| grep -v "<W>"\' to filter out some warnings - you can omit it if you want.\npython3 ex3_overlay.py --video-source "$IMSDK_VIDEO_SOURCE" | grep -v "<W>"\n\n# Frame ready\n#     Data: name=overlay_raw (224, 224, 4) (uint8)\n#     Timings: frame_ready_webcam\u2192transform_done: 2.22ms, transform_done\u2192pipeline_finished: 5.17ms, pipeline_finished\u2192save_image_end: 21.51ms (total 28.89ms)\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Static overlay onto webcam image",src:t(1457).A+"",width:"408",height:"409"})}),"\n",(0,a.jsx)(n.h4,{id:"34-combining-neural-network-with-overlay",children:"3.4: Combining neural network with overlay"}),"\n",(0,a.jsx)(n.p,{children:"You've now seen how to run a neural network as part of an IM SDK pipeline; and you've seen how to draw overlays. Let's combine these into a single pipeline, where we overlay the prediction onto the image - all without ever touching the CPU."}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a new file ",(0,a.jsx)(n.code,{children:"ex3_from_imsdk.py"})," and add:"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'\nfrom gst_helper import gst_grouped_frames, atomic_save_numpy_buffer, timing_marks_to_str, download_file_if_needed, softmax\nimport time, argparse, numpy as np\nfrom ai_edge_litert.interpreter import Interpreter, load_delegate\nfrom PIL import ImageDraw, Image\n\nparser = argparse.ArgumentParser(description=\'GStreamer -> SqueezeNet\')\nparser.add_argument(\'--video-source\', type=str, required=True, help=\'GStreamer video source (e.g. "v4l2src device=/dev/video2" or "qtiqmmfsrc name=camsrc camera=0")\')\nargs, unknown = parser.parse_known_args()\n\nif args.video_source.strip() == \'\':\n    raise Exception(\'--video-source is empty, did you not set the IMSDK_VIDEO_SOURCE env variable? E.g.:\\n\' +\n    \'    export IMSDK_VIDEO_SOURCE="v4l2src device=/dev/video2"\')\n\nMODEL_PATH = download_file_if_needed(\'models/squeezenet1_1-squeezenet-1.1-w8a8.tflite\', \'https://cdn.edgeimpulse.com/qc-ai-docs/models/squeezenet1_1-squeezenet-1.1-w8a8.tflite\')\nLABELS_PATH = download_file_if_needed(\'models/SqueezeNet-1.1_labels.txt\', \'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_labels.txt\')\n\n# Parse labels\nwith open(LABELS_PATH, \'r\') as f:\n    labels = [line for line in f.read().splitlines() if line.strip()]\n\n# IM SDK expects labels in this format\n# (structure)"white-shark,id=(guint)0x3,color=(guint)0x00FF00FF;" (so no spaces in the name)\nIMSDK_LABELS_PATH = \'models/SqueezeNet-1.1_imsdk_labels.txt\'\nwith open(IMSDK_LABELS_PATH, \'w\') as f:\n    imsdk_labels_content = []\n    for i in range(0, len(labels)):\n        label = labels[i]\n        label = label.replace(\' \', \'-\') # no space allowed\n        label = label.replace("\'", \'\') # no \' allowed\n        imsdk_labels_content.append(f\'(structure)"{label},id=(guint){hex(i)},color=(guint)0x00FF00FF;"\')\n    f.write(\'\\n\'.join(imsdk_labels_content))\n\n# Load TFLite model and allocate tensors, note: this is a 224x224 model with uint8 input!\n# If your models are different, then you\'ll need to update the pipeline below.\ninterpreter = Interpreter(\n    model_path=MODEL_PATH,\n    experimental_delegates=[load_delegate("libQnnTFLiteDelegate.so", options={"backend_type": "htp"})]     # Use NPU\n)\ninterpreter.allocate_tensors()\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\nscale, zero_point = output_details[0][\'quantization\']\n\nPIPELINE = (\n    # Part 1: Create a qtivcomposer with two sinks (we\'ll write webcam to sink 0, overlay to sink 1)\n    "qtivcomposer name=comp sink_0::zorder=0 "\n        # Sink 1 (the overlay). We don\'t need to pass in a position/size as the overlay will already be the right size.\n        f"sink_1::zorder=1 sink_1::alpha=1.0 ! "\n    "videoconvert ! "\n    "video/x-raw,format=RGBA,width=224,height=224 ! "\n    # Convert to PNG\n    "identity name=pngenc_begin silent=false ! "\n    "pngenc ! "\n    "identity name=pngenc_done silent=false ! "\n    # Write frames to appsink\n    "appsink name=image_with_overlay drop=true sync=false max-buffers=1 emit-signals=true "\n\n    # Video source\n    f"{args.video_source} ! "\n    # Properties for the video source\n    "video/x-raw,width=1920,height=1080 ! "\n    # An identity element so we can track when a new frame is ready (so we can calc. processing time)\n    "identity name=frame_ready_webcam silent=false ! "\n    # Crop (square), the crop syntax is (\'<X, Y, WIDTH, HEIGHT >\').\n    # So here we use 1920x1080 input, then center crop to 1080x1080 ((1920-1080)/2 = 420 = x crop)\n    f\'qtivtransform crop="<420, 0, 1080, 1080>" ! \'\n    # then resize to 224x224, (!! NOTE: here you need to use format=NV12 to get a tightly packed buffer - if you use RGB this won\'t work !!)\n    "video/x-raw,width=224,height=224,format=NV12 ! "\n    # Event when the crop/scale are done\n    "identity name=transform_done silent=false ! "\n\n    # Tee the stream\n    "tee name=v "\n\n    # Branch A) send the image to the composer (sink 0)\n        "v. ! queue max-size-buffers=1 leaky=downstream ! "\n        "comp.sink_0 "\n\n    # Branch B) run inference over the image\n        "v. ! queue max-size-buffers=1 leaky=downstream ! "\n        # turn into right format (UINT8 data type) and add batch dimension\n        \'qtimlvconverter ! neural-network/tensors,type=UINT8,dimensions=<<1,224,224,3>> ! \'\n        # run inference (using the QNN delegates to run on NPU)\n        f\'qtimltflite delegate=external external-delegate-path=libQnnTFLiteDelegate.so external-delegate-options="QNNExternalDelegate,backend_type=htp;" model="{MODEL_PATH}" ! \'\n\n        # Split the stream\n        "tee name=t "\n\n        # Branch B1) send raw results to the appsink (note that these are still quantized!)\n            "t. ! queue max-size-buffers=1 leaky=downstream ! "\n            "queue max-size-buffers=2 leaky=downstream ! "\n            "appsink name=qtimltflite_output drop=true sync=false max-buffers=1 emit-signals=true "\n\n        # Branch B2) parse the output tensor in IM SDK\n            "t. ! queue max-size-buffers=1 leaky=downstream ! "\n            # Run the classifier (add softmax, as AI Hub models miss it), this will return the top n labels (above threshold, min. threshold is 10)\n            # note that you also need to pass the quantization params (see below under the "gst_grouped_frames" call).\n            f\'qtimlvclassification name=cls module=mobilenet extra-operation=softmax threshold=10 results=1 labels="{IMSDK_LABELS_PATH}" ! \'\n            # Event when inference is done\n            "identity name=inference_done silent=false ! "\n\n            # create an RGBA overlay\n            "video/x-raw,format=BGRA,width=224,height=224 ! "\n\n            # And send to the composer\n            "comp.sink_1 "\n)\n\nfor frames_by_sink, marks in gst_grouped_frames(PIPELINE, element_properties={\n    # the qtimlvclassification element does not like these variables passed in as a string in the pipeline, so set them like this\n    \'cls\': { \'constants\': f\'Mobilenet,q-offsets=<{zero_point}>,q-scales=<{scale}>\' }\n}):\n    print(f"Frame ready")\n    print(\'    Data:\', end=\'\')\n    for key in list(frames_by_sink):\n        print(f\' name={key} {frames_by_sink[key].shape} ({frames_by_sink[key].dtype})\', end=\'\')\n    print(\'\')\n\n    # Get prediction (these come in quantized, so dequantize first)\n    q_output = frames_by_sink[\'qtimltflite_output\']\n    f_output = (q_output.astype(np.float32) - zero_point) * scale\n\n    # Image classification models in AI Hub miss a Softmax() layer at the end of the model, so add it manually\n    scores = softmax(f_output)\n    top_k = scores.argsort()[-5:][::-1]\n    print(f"    Top-5 predictions:")\n    for i in top_k:\n        print(f"        Class {labels[i]}: score={scores[i]}")\n\n    # Save image to disk\n    save_image_start = time.perf_counter()\n    png_file = frames_by_sink[\'image_with_overlay\']\n    atomic_save_numpy_buffer(png_file, path=\'out/webcam_with_overlay_imsdk.png\')\n    save_image_end = time.perf_counter()\n\n    # Add an extra mark, so we have timing info for the complete pipeline\n    marks[\'save_image_end\'] = list(marks.items())[-1][1] + (save_image_end - save_image_start)\n\n    print(\'    Timings:\', timing_marks_to_str(marks))\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"Run this application:"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# We use \'| grep -v "<W>"\' to filter out some warnings - you can omit it if you want.\npython3 ex3_from_imsdk.py --video-source "$IMSDK_VIDEO_SOURCE" | grep -v "<W>"\n\n# Frame ready\n#     Data: name=image_with_overlay (49550,) (uint8) name=qtimltflite_output (1000,) (uint8)\n#     Top-5 predictions:\n#         Class grand piano: score=0.2539741098880768\n#         Class spotlight: score=0.056083470582962036\n#         Class punching bag: score=0.03183111920952797\n#         Class accordion: score=0.03183111920952797\n#         Class projector: score=0.0218204278498888\n#   Timings: frame_ready_webcam\u2192transform_done: 1.69ms, transform_done\u2192inference_done: 6.93ms, inference_done\u2192pngenc_begin: 1.50ms, pngenc_begin\u2192pngenc_done: 15.96ms, pngenc_done\u2192pipeline_finished: 0.76ms, pipeline_finished\u2192save_image_end: 1.10ms (total 27.95ms)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Great! This whole pipeline now runs in the IM SDK. You can find the output image in ",(0,a.jsx)(n.code,{children:"out/webcam_with_overlay_imsdk.png"}),":"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Image classification model with an overlay rendered by IM SDK",src:t(53064).A+"",width:"417",height:"409"})}),"\n",(0,a.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,a.jsx)(n.h4,{id:"pipeline-does-not-yield-anything",children:"Pipeline does not yield anything"}),"\n",(0,a.jsxs)(n.p,{children:["If you don't see any output, add ",(0,a.jsx)(n.code,{children:"GST_DEBUG=3"})," to see more detailed debug info."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"GST_DEBUG=3 python3 ex1.py\n"})}),"\n",(0,a.jsx)(n.h4,{id:"qmmf-recorder-startcamera-failed--failed-to-open-camera",children:"QMMF Recorder StartCamera Failed / Failed to Open Camera"}),"\n",(0,a.jsx)(n.p,{children:"If you see an error like (using the built-in camera on the RB3 Gen 2 Vision Kit):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"0:00:00.058915726  7329     0x1faf28a0 ERROR             qtiqmmfsrc qmmf_source_context.cc:1426:gst_qmmf_context_open: QMMF Recorder StartCamera Failed!\n0:00:00.058955986  7329     0x1faf28a0 WARN              qtiqmmfsrc qmmf_source.c:1206:qmmfsrc_change_state:<camsrc> error: Failed to Open Camera!\n"})}),"\n",(0,a.jsx)(n.p,{children:"Run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"sudo killall cam-server\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},53064:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/IMSDK_3-5f3156437a0bd430520f6618a2fe6c70.png"}}]);