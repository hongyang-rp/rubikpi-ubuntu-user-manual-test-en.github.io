"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7158],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var o=i(96540);const t={},s=o.createContext(t);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},39909:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Document Home/ai/onnx","title":"ONNX","description":"ONNX (Open Neural Network Exchange) is a standard format for exporting models \u2014 typically created in frameworks like PyTorch \u2014 so they can run anywhere. On Dragonwing devices you can use ONNX Runtime with AI Engine Direct to execute ONNX models directly on the NPU for maximum performance.","source":"@site/docs/Document Home/8.ai/4.onnx.md","sourceDirName":"Document Home/8.ai","slug":"/Document Home/ai/onnx","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/ai/onnx","draft":false,"unlisted":false,"editUrl":"https://github.com/hongyang-rp/rubikpi-ubuntu-user-manual-test-en.github.io/tree/main/docs/Document Home/8.ai/4.onnx.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"LiteRT / TFLite","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/ai/litert_tflite"},"next":{"title":"Llama.cpp","permalink":"/rubikpi-ubuntu-user-manual-test-en.github.io/docs/Document Home/ai/llama_cpp"}}');var t=i(74848),s=i(28453);const r={},a="ONNX",l={},d=[{value:"onnxruntime wheel with AI Engine Direct",id:"onnxruntime-wheel-with-ai-engine-direct",level:2},{value:"Preparing your onnx file",id:"preparing-your-onnx-file",level:2},{value:"Dynamic shapes",id:"dynamic-shapes",level:3},{value:"Quantizing models",id:"quantizing-models",level:3},{value:"Running a model on the NPU (Python)",id:"running-a-model-on-the-npu-python",level:2},{value:"Example: SqueezeNet-1.1 (Python)",id:"example-squeezenet-11-python",level:2},{value:"Tips &amp; tricks",id:"tips--tricks",level:2},{value:"Disable CPU fallback",id:"disable-cpu-fallback",level:3},{value:"Building new versions of the the onnxruntime package",id:"building-new-versions-of-the-the-onnxruntime-package",level:3}];function u(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"onnx",children:"ONNX"})}),"\n",(0,t.jsx)(n.p,{children:"ONNX (Open Neural Network Exchange) is a standard format for exporting models \u2014 typically created in frameworks like PyTorch \u2014 so they can run anywhere. On Dragonwing devices you can use ONNX Runtime with AI Engine Direct to execute ONNX models directly on the NPU for maximum performance."}),"\n",(0,t.jsx)(n.h2,{id:"onnxruntime-wheel-with-ai-engine-direct",children:"onnxruntime wheel with AI Engine Direct"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"onnxruntime"})," currently does not publish prebuilt wheels for aarch64 Linux with AI Engine Direct bindings - so you cannot install onnxruntime through ",(0,t.jsx)(n.code,{children:"pip"}),". You can download prebuilt wheels here:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://cdn.edgeimpulse.com/qc-ai-docs/wheels/onnxruntime_qnn-1.23.0-cp312-cp312-linux_aarch64.whl",children:"onnxruntime_qnn-1.23.0-cp312-cp312-linux_aarch64.whl"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["(Install via ",(0,t.jsx)(n.code,{children:"pip3 install onnxruntime_qnn-*-linux_aarch64.whl"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["To build a wheel for other onnxruntime or Python versions, see ",(0,t.jsx)(n.a,{href:"https://github.com/edgeimpulse/onnxruntime-qnn-linux-aarch64",children:"edgeimpulse/onnxruntime-qnn-linux-aarch64"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"preparing-your-onnx-file",children:"Preparing your onnx file"}),"\n",(0,t.jsx)(n.p,{children:"The NPU only only supports quantized uint8/int8 models with a fixed input shape. If your model is not quantized, or if you have a dynamic input shape your model will automatically be offloaded to the CPU. Here's some tips on how to prepare your model."}),"\n",(0,t.jsxs)(n.p,{children:["A full length tutorial for exporting a PyTorch model to ONNX is ",(0,t.jsx)(n.a,{href:"https://docs.pytorch.org/tutorials/beginner/onnx/export_simple_model_to_onnx_tutorial.html",children:"available in the PyTorch documentation"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-shapes",children:"Dynamic shapes"}),"\n",(0,t.jsxs)(n.p,{children:["If you have a model with dynamic shapes, you'll need to make them fixed shape first. You can see the shape of your network via ",(0,t.jsx)(n.a,{href:"https://netron.app",children:"Netron"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"For example, this model has dynamic shapes:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://3580193864-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FxM5xrbdbelLSl7uN8oac%2Fuploads%2Fgit-blob-7a24b95e775b9580b371704771b840abc92fb72e%2Fonnxruntime1.png?alt=media",alt:"",title:"A model with dynamic shape"})}),"\n",(0,t.jsxs)(n.p,{children:["You can set a fixed shape via ",(0,t.jsx)(n.code,{children:"onnxruntime.tools.make_dynamic_shape_fixed"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 -m onnxruntime.tools.make_dynamic_shape_fixed \\\n    model_without_shapes.onnx \\\n    model_with_shapes.onnx \\\n    --input_name pixel_values \\\n    --input_shape 1,3,224,224\n"})}),"\n",(0,t.jsx)(n.p,{children:"Afterwards your model has a fixed shape and is ready to run on your NPU."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://3580193864-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FxM5xrbdbelLSl7uN8oac%2Fuploads%2Fgit-blob-fe2eb378e26e2e6583bc00e0583713a98ba1bd88%2Fonnxruntime2.png?alt=media",alt:"",title:"An ONNX model with a fixed shape"})}),"\n",(0,t.jsx)(n.h3,{id:"quantizing-models",children:"Quantizing models"}),"\n",(0,t.jsxs)(n.p,{children:["The NPU only supports uint8/int8 quantized models. Unsupported models, or unsupported layers will be automatically moved back to the CPU. For a guide on quantization models, see ",(0,t.jsx)(n.a,{href:"https://onnxruntime.ai/docs/performance/model-optimizations/quantization.html",children:"ONNX Runtime docs: Quantize ONNX Models"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Don't want to quantize yourself?"})," You can download a range of pre-quantized models from ",(0,t.jsx)(n.a,{href:"https://aihub.qualcomm.com",children:"Qualcomm AI Hub"}),", or use ",(0,t.jsx)(n.a,{href:"https://qc-ai-test.gitbook.io/qc-ai-test-docs/running-building-ai-models/edge-impulse",children:"Edge Impulse"})," to quantize new or existing models."]})}),"\n",(0,t.jsx)(n.h2,{id:"running-a-model-on-the-npu-python",children:"Running a model on the NPU (Python)"}),"\n",(0,t.jsxs)(n.p,{children:["To offload a model to the NPU, you just need to load the ",(0,t.jsx)(n.code,{children:"QNNExecutionProvider"}),"; and pass it when creating the ",(0,t.jsx)(n.code,{children:"InferenceSession"}),". E.g.:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'import onnxruntime as ort\n\nproviders = (("QNNExecutionProvider", {\n    "backend_type": "htp",\n    "profiling_level": "detailed",\n}))\n\nso = ort.SessionOptions()\n\nsess = ort.InferenceSession(MODEL_PATH, sess_options=so, providers=providers)\nactual_providers = sess.get_providers()\nprint(f"Using providers: {actual_providers}")   # will show QNNExecutionProvider,CPUExecutionProvider if QNN can be loaded\n'})}),"\n",(0,t.jsx)(n.p,{children:"(Make sure you use an onnxruntime wheel with AI Engine Direct bindings, see the top of the page)"}),"\n",(0,t.jsx)(n.h2,{id:"example-squeezenet-11-python",children:"Example: SqueezeNet-1.1 (Python)"}),"\n",(0,t.jsx)(n.p,{children:"Open the terminal on your development board, or an ssh session to your development board, and:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a new venv, and install the onnxruntime and Pillow:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3.12 -m venv .venv-onnxruntime-demo\nsource .venv-onnxruntime-demo/bin/activate\n\n# onnxruntime with AI Engine Direct bindings (only works on Python3.12)\nwget https://cdn.edgeimpulse.com/qc-ai-docs/wheels/onnxruntime_qnn-1.23.0-cp312-cp312-linux_aarch64.whl\npip3 install onnxruntime_qnn-1.23.0-cp312-cp312-linux_aarch64.whl\nrm onnxruntime*.whl\n\n# Other dependencies\npip3 install Pillow\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Here's an end-to-end example running ",(0,t.jsx)(n.a,{href:"https://aihub.qualcomm.com/models/squeezenet1_1",children:"SqueezeNet-1.1"}),". Save this file as ",(0,t.jsx)(n.code,{children:"inference_onnx.py"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'#!/usr/bin/env python3\nimport os, sys, time, urllib.request\nimport numpy as np\nfrom PIL import Image\nimport onnxruntime as ort\n\ndef curr_ms():\n    return round(time.time() * 1000)\n\nuse_npu = True if len(sys.argv) >= 2 and sys.argv[1] == \'--use-npu\' else False\n\n# Path to your quantized ONNX model and test image (will be download automatically)\nMODEL_PATH = "model.onnx"\nMODEL_DATA_PATH = "model.data"\nIMAGE_PATH = "boa-constrictor.jpg"\nLABELS_PATH = "SqueezeNet-1.1_labels.txt"\n\nif not os.path.exists(MODEL_PATH):\n    print("Downloading model...")\n    model_url = \'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_w8a8.onnx\'\n    urllib.request.urlretrieve(model_url, MODEL_PATH)\n\nif not os.path.exists(MODEL_DATA_PATH):\n    print("Downloading model data...")\n    model_url = \'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_w8a8.data\'\n    urllib.request.urlretrieve(model_url, MODEL_DATA_PATH)\n\nif not os.path.exists(LABELS_PATH):\n    print("Downloading labels...")\n    labels_url = \'https://cdn.edgeimpulse.com/qc-ai-docs/models/SqueezeNet-1.1_labels.txt\'\n    urllib.request.urlretrieve(labels_url, LABELS_PATH)\n\nif not os.path.exists(IMAGE_PATH):\n    print("Downloading image...")\n    image_url = \'https://cdn.edgeimpulse.com/qc-ai-docs/examples/boa-constrictor.jpg\'\n    urllib.request.urlretrieve(image_url, IMAGE_PATH)\n\nwith open(LABELS_PATH, \'r\') as f:\n    labels = [line for line in f.read().splitlines() if line.strip()]\n\nproviders = []\nif use_npu:\n    providers.append(("QNNExecutionProvider", {\n        "backend_type": "htp",\n    }))\nelse:\n    providers.append("CPUExecutionProvider")\n\nso = ort.SessionOptions()\n\nsess = ort.InferenceSession(MODEL_PATH, sess_options=so, providers=providers)\nactual_providers = sess.get_providers()\nprint(f"Using providers: {actual_providers}") # Show which providers are actually loaded\n\ninputs  = sess.get_inputs()\noutputs = sess.get_outputs()\n\ndef load_image_for_onnx(path, H, W):\n    img = Image.open(path).convert("RGB").resize((W, H))\n    arr = np.array(img)\n    arr = arr.astype(np.float32) / 255.0\n\n    arr = np.transpose(arr, (2, 0, 1))  # HWC -> CHW\n    arr = np.expand_dims(arr, 0)        # -> NCHW\n\n    return arr\n\n# input data scaled 0..1\ninput_data_f32 = load_image_for_onnx(path=IMAGE_PATH, H=224, W=224)\n\n# quantize model (cannot read these params from the onnx model I believe)\nscale = 1.0 / 255.0\nzero_point = 0\ninput_data_u8 = np.round(input_data_f32.astype(np.float32) / float(scale)) + int(zero_point)\ninput_data_u8 = np.clip(input_data_u8, 0, 255).astype(np.uint8)\n\n# Warmup once\n_ = sess.run(None, {sess.get_inputs()[0].name: input_data_u8})\n\n# Run 10x so we can calculate avg. runtime per inference\nstart = curr_ms()\nfor i in range(10):\n    out = sess.run(None, {sess.get_inputs()[0].name: input_data_u8})\nend = curr_ms()\n\n# Image classification models in AI Hub miss a Softmax() layer at the end of the model, so add it manually\ndef softmax(x, axis=-1):\n    # subtract max for numerical stability\n    x_max = np.max(x, axis=axis, keepdims=True)\n    e_x = np.exp(x - x_max)\n    return e_x / np.sum(e_x, axis=axis, keepdims=True)\n\nscores = softmax(np.squeeze(out[0], axis=0))\n\n# Take top 5\ntop_k_idx = scores.argsort()[-5:][::-1]\n\nprint("\\nTop-5 predictions:")\nfor i in top_k_idx:\n    label = labels[i] if i < len(labels) else f"Class {i}"\n    print(f"{label}: score={scores[i]}")\n\nprint("")\nprint(f"Inference took (on average): {(end - start) / 10:.2f} ms per image")\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: this script has hard-coded quantization parameters. If you swap out the model you'll might need to change these."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the model on the CPU:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 inference_onnx.py\n\n# Top-5 predictions:\n# common iguana: score=0.3682704567909241\n# night snake: score=0.1186317503452301\n# water snake: score=0.1186317503452301\n# boa constrictor: score=0.0813227966427803\n# bullfrog: score=0.0813227966427803\n#\n# Inference took (on average): 6.50 ms per image\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the model on the NPU:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"python3 inference_onnx.py --use-npu\n\n# Top-5 predictions:\n# common iguana: score=0.30427297949790955\n# water snake: score=0.11838366836309433\n# night snake: score=0.11838366836309433\n# boa constrictor: score=0.11838366836309433\n# rock python: score=0.08115273714065552\n#\n# Inference took (on average): 1.60 ms per image\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"As you can see this model runs significantly faster on NPU - but there's a slight change in the output of the model."}),"\n",(0,t.jsx)(n.h2,{id:"tips--tricks",children:"Tips & tricks"}),"\n",(0,t.jsx)(n.h3,{id:"disable-cpu-fallback",children:"Disable CPU fallback"}),"\n",(0,t.jsx)(n.p,{children:"To debug, you might want to choose to disable fallback to the CPU via:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-py",children:'so = ort.SessionOptions()\nso.add_session_config_entry("session.disable_cpu_ep_fallback", "1")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"building-new-versions-of-the-the-onnxruntime-package",children:"Building new versions of the the onnxruntime package"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"https://github.com/edgeimpulse/onnxruntime-qnn-linux-aarch64",children:"edgeimpulse/onnxruntime-qnn-linux-aarch64"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);